#import sys
# Из важного:
# 1) исключения это нормальный и важный механизм в питоне, не нужно стесняться его использовать, бросать и перехватывать
# исключения, писать свои типы исключений. К сожалению, по ряду причин не редко вижу,
# что программисты не кидают исключений в своих функциях
# 2) когда пишем функции, то стараемся думать не в позитивном ключе, а в плане того, что может пойти не так.
# В таких случаях бросаем исключения, делаем это как можно раньше (в начале функции)
# 3) Механизм по-умолчанию в питоне просто выведет текст исключения и завершит работу программы,
# если нам нужно другое поведение то используем try/except/finally
# 4) блоков except может быть несколько, каждый со своим типом исключения и логикой,
# но важно чтобы исключение было конкретным, и в блоке всегда делаем хоть что-то. НЕ проглатываем исключения!
# 5) finally выполняется в любом случае, даже если исключения не упало,
# НО важно понимать, что файналли это не какой то волшебный блок, исключение может упасть и там,
# нужно обдумывать логику этого блока (например не использовать переменные, которые могли не быть созданы)
# 6) raise используем чтобы бросить исключение самостоятельно, при этом можно указать какое конкретно исключение бросить.
# Если не указать то будет брошено последнее упавшее исключение (важно чтобы оно было!)
# 7) не стесняемся писать свои классы исключений, главное давать им понятные имена и прописываем в доке случаи,
# когда они могут быть выброшены

#
# url_list = ['text.txt','text.txt',]
# list_defect = []
# list_info = []
#
# try:
#     for url in url_list:
#         try:
#             r = open(url)
#             list_info.append(r.read())
#             print('здесь')
#
#         except Exception:
#             list_defect.append(url)
#             print('тут')
#             sys.exit()
#             continue
# finally:
#     r = open('save.txt', 'a')
#     for i in info:
#         r.write(str(list_defect))
#         r.close()
#         print('Я все записал несмотря ни на что!!!!')

###############################################################################################
# def count_words(filename):
# 	 """Подсчет приблизительного количества строк в файле."""
# try:
# with open(filename) as f_obj:
# contents = f_obj.read()
# except FileNotFoundError:
# msg = "Sorry, the file " + filename + " does not exist."
# print(msg)
# else:
# # Подсчет приблизительного количества строк в файле.
# words = contents.split()
# num_words = len(words)
# print("The file " + filename + " has about " + str(num_words) +
# " words.")
# filename = 'alice.txt'
# count_words(filename)
###############################################################################################################
# 10-6. Сложение: при вводе числовых данных часто встречается типичная проблема: пользователь вводит текст вместо чисел.
# При попытке преобразовать данные в int происходит
# исключение TypeError. Напишите программу, которая запрашивает два числа, складывает
# их и выводит результат. Перехватите исключение TypeError, если какое-либо из входных
# значений не является числом, и выведите удобное сообщение об ошибке. Протестируйте
# свою программу: сначала введите два числа, а потом введите текст вместо одного из чисел.

# try:
#     a = input("Введите число a: ")
#     b = input("Введите число b: ")
#     print('a + b =',int(a + b))
# except ValueError:
#     print("Одно из введенных значений не является числом")

########################################################################################
# 10-7. Калькулятор: заключите код из упражнения 10-6 в цикл while, чтобы пользователь
# мог продолжать вводить числа, даже если он допустил ошибку и ввел текст вместо числа

# while True :
#     try:
#         a = int(input("Введите число a: "))
#         if a == 'esc':
#             esc = False
#         b = int(input("Введите число b: "))
#         if b == 'esc':
#             esc = False
#         print('a + b =', a + b)
#         break
#     except :
#         print("Одно из введенных значений не является числом! Повторите!")

###################################################################################################################
print('fd')